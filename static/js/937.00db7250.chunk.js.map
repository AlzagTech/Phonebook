{"version":3,"file":"static/js/937.00db7250.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","components/ContactsList/ContactItem.styled.jsx","components/ContactsList/ContactItem.jsx","components/ContactsList/ContactList.styled.jsx","components/InfoTextBox/InfoTextBox.styled.jsx","components/InfoTextBox/InfoTextBox.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikMessage,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  label + label {\n    margin-top: 16px;\n    margin-bottom: 30px;\n  }\n`;\n\nexport const FormLabel = styled.p`\n  margin-bottom: 4px;\n`;\n\nexport const FormInput = styled(FormikField)`\n  width: 100%;\n\n  padding: 10px;\n\n  outline: none;\n  border: none;\n  border-radius: 4px;\n\n  background-color: #efefef;\n\n  &:focus {\n    background-color: #e6e3e3;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  border: none;\n  border-radius: 4px;\n\n  background-color: rgba(57, 116, 148, 0.8);\n  color: #ffffff;\n\n  &:hover,\n  &:focus {\n    background-color: rgba(57, 116, 148, 1);\n  }\n`;\n\nexport const FormErrorMessage = styled(FormikMessage)`\n  color: red;\n`;\n","import { Formik } from 'formik';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport {\n  Form,\n  FormInput,\n  FormBtn,\n  FormLabel,\n  FormErrorMessage,\n} from './ContactForm.styles';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const isContactRepeat = contacts.find(\n      contact => contact.name === values.name\n    );\n\n    if (isContactRepeat) {\n      alert(`${values.name} is alredy in contacts`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label htmlFor=\"name\">\n          <FormLabel>Name</FormLabel>\n          <FormInput\n            id=\"name\"\n            name=\"name\"\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <FormErrorMessage name=\"name\" component=\"span\" />\n        </label>\n\n        <label htmlFor=\"number\">\n          <FormLabel>Number</FormLabel>\n          <FormInput\n            id=\"number\"\n            name=\"number\"\n            type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <FormErrorMessage name=\"number\" component=\"span\" />\n        </label>\n\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nconst contacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = createSelector(\n  [contacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & + & {\n    margin-top: 16px;\n  }\n`;\n\nexport const ContactName = styled.p`\n  font-weight: bold;\n`;\n\nexport const ContactNumber = styled.p`\n  color: #867e7e;\n`;\n\nexport const ContactBtn = styled.button`\n  justify-content: center;\n  align-items: center;\n  border: none;\n  border-radius: 4px;\n  padding: 8px;\n\n  &:hover {\n    background-color: #e6e3e3;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nimport {\n  Contact,\n  ContactName,\n  ContactNumber,\n  ContactBtn,\n} from './ContactItem.styled';\n\nexport const ContactItem = ({ contact }) => {\n  const { name, number, id } = contact;\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Contact>\n      <div>\n        <ContactName>{name}</ContactName>\n        <ContactNumber>Tel: {number}</ContactNumber>\n      </div>\n      <ContactBtn type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactBtn>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  label + label {\n    margin-top: 16px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TextBox = styled.div`\n  text-align: center;\n\n  padding-top: 8px;\n  padding-bottom: 8px;\n`;\n","import { TextBox } from './InfoTextBox.styled';\n\nexport const InfoTextBox = ({ children }) => {\n  return (\n    <TextBox>\n      <p>{children}</p>\n    </TextBox>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectVisibleContacts } from 'redux/filter/selectors';\n\nimport { ContactItem } from './ContactItem';\nimport { List } from './ContactList.styled';\nimport { InfoTextBox } from 'components/InfoTextBox/InfoTextBox';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const contactsLength = contacts.length;\n  const visibleContactsLength = visibleContacts.length;\n\n  return (\n    <>\n      {contactsLength === 0 ? (\n        <InfoTextBox>You have no contacts yet...</InfoTextBox>\n      ) : visibleContactsLength === 0 ? (\n        <InfoTextBox>No results in your contacts...</InfoTextBox>\n      ) : (\n        <List>\n          {visibleContacts.map(contact => (\n            <ContactItem key={contact.id} contact={contact} />\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: block;\n  margin-top: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 100%;\n  margin-top: 4px;\n  margin-bottom: 20px;\n  padding: 10px;\n\n  outline: none;\n  border: none;\n  border-radius: 4px;\n\n  background-color: #efefef;\n  &:focus {\n    background-color: #e6e3e3;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\n\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <FilterLabel htmlFor=\"filter\">\n      <p>Find contacts by name</p>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </FilterLabel>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SectionContainer = styled.div`\n  max-width: 400px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 15px;\n\n  padding: 16px;\n  border-radius: 4px;\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\n  background-color: #fff;\n\n  & + & {\n    margin-bottom: 20px;\n  }\n`;\n","import { SectionContainer } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <SectionContainer>{children}</SectionContainer>;\n};\n","import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { LoaderBox } from './Loader.styled';\n\nconst { Oval } = require('react-loader-spinner');\n\nexport const Loader = () => {\n  return (\n    <LoaderBox>\n      <Oval\n        height={30}\n        width={30}\n        color=\"#6190a9\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"#98c1d6cc\"\n        strokeWidth={2}\n        strokeWidthSecondary={2}\n      />\n    </LoaderBox>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Container } from '../components/Container/Container';\nimport { Loader } from '../components/Loader/Loader';\nimport { InfoTextBox } from '../components/InfoTextBox/InfoTextBox';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n      </Container>\n      <Container>\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error ? <Loader /> : <ContactsList />}\n        {error && (\n          <InfoTextBox>\n            <p>Something went wrong!</p>\n          </InfoTextBox>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","Form","styled","FormikForm","FormLabel","FormInput","FormikField","FormBtn","FormErrorMessage","FormikMessage","ContactForm","useSelector","dispatch","useDispatch","initialValues","name","number","onSubmit","values","actions","find","contact","alert","addContact","resetForm","htmlFor","id","type","pattern","title","required","component","selectVisibleContacts","createSelector","filter","normalizedFilter","toLowerCase","trim","includes","Contact","ContactName","ContactNumber","ContactBtn","ContactItem","onClick","deleteContact","List","TextBox","InfoTextBox","children","ContactsList","visibleContacts","contactsLength","length","visibleContactsLength","map","FilterLabel","FilterInput","Filter","value","onChange","event","setFilter","currentTarget","SectionContainer","Container","LoaderBox","Oval","require","Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","useEffect","fetchContacts"],"sourceRoot":""}